{
    "docs": [
        {
            "location": "/",
            "text": "Request Yo Racks (Now)!\n\u00b6\n\n\nThe city of Austin offers the possibility to apply for the \nfree installation of bike corrals on the right of way/parking spot close to businesses\n. The process requires the requester to write an email to a specific service of the city, and include additional information about the location and the business owner(s).\n\n\nBut there are two problems with this approach:\n\n\n\n\n\n\nThe first problem is that people do not want to spend the time to write the email and collect the necessary information.\n\n\n\n\n\n\nThe second one is that, in spite of the fact that the people in charge of the program are willing to help, the process is not completely straightforward:\n\n\n\n\n\"There will generally be at least a few back and forth messages associated with a bike parking request.\"\n\n\n\n\n\n\n\n\n\u201cRequest yo rack\u201d proposes to simplify the process by automating all these tasks, and reducing the requester efforts to 3 simple steps:\n\n\n\n\nSelect the location on the map\n\n\nReview/Edit the information\n\n\nSubmit",
            "title": "Home"
        },
        {
            "location": "/#request-yo-racks-now",
            "text": "The city of Austin offers the possibility to apply for the  free installation of bike corrals on the right of way/parking spot close to businesses . The process requires the requester to write an email to a specific service of the city, and include additional information about the location and the business owner(s).  But there are two problems with this approach:    The first problem is that people do not want to spend the time to write the email and collect the necessary information.    The second one is that, in spite of the fact that the people in charge of the program are willing to help, the process is not completely straightforward:   \"There will generally be at least a few back and forth messages associated with a bike parking request.\"     \u201cRequest yo rack\u201d proposes to simplify the process by automating all these tasks, and reducing the requester efforts to 3 simple steps:   Select the location on the map  Review/Edit the information  Submit",
            "title": "Request Yo Racks (Now)!"
        },
        {
            "location": "/contributor-zone/goals-strategy/",
            "text": "Goals and strategy\n\u00b6",
            "title": "Goals & Strategy"
        },
        {
            "location": "/contributor-zone/goals-strategy/#goals-and-strategy",
            "text": "",
            "title": "Goals and strategy"
        },
        {
            "location": "/contributor-zone/technical-overview/",
            "text": "Technical overview\n\u00b6\n\n\nRequest Yo Racks is a collection of open source projects hosted on Github.\n\n\nKey principles\n\u00b6\n\n\n\n\nEverything must be automated.\n\n\nEverything must be documented.\n\n\nEverything must be containerized.\n\n\n\n\nAPI\n\u00b6\n\n\nThe API is done in \nPython\n. We currently use \nDjango REST Framework\n (DRF), but will possibly switch to \nAPIStar\n in a near future.\n\n\nThe tasks will be handled by \nCelery\n to process them asynchronously.\n\n\nALL the documentation is written in \nreStructuredText\n and generated with \nSphinx\n\n\nRepository: \nAPI\n\n\nWeb\n\u00b6\n\n\nThe frontend is a \nProgressive Web Application (PWA)\n. The \nPolymer\n library offers the ability to quickly create a PWA implementing the \nPRPL pattern\n, and to build\n web components\n.\n\n\nRepository: \nWeb\n\n\nInfrastructure\n\u00b6\n\n\nThe projects are fully containerized using \nDocker\n and will be deployed on a \nKubernetes\n cluster, most likely on the \nGCP\n.",
            "title": "Technical Overview"
        },
        {
            "location": "/contributor-zone/technical-overview/#technical-overview",
            "text": "Request Yo Racks is a collection of open source projects hosted on Github.",
            "title": "Technical overview"
        },
        {
            "location": "/contributor-zone/technical-overview/#key-principles",
            "text": "Everything must be automated.  Everything must be documented.  Everything must be containerized.",
            "title": "Key principles"
        },
        {
            "location": "/contributor-zone/technical-overview/#api",
            "text": "The API is done in  Python . We currently use  Django REST Framework  (DRF), but will possibly switch to  APIStar  in a near future.  The tasks will be handled by  Celery  to process them asynchronously.  ALL the documentation is written in  reStructuredText  and generated with  Sphinx  Repository:  API",
            "title": "API"
        },
        {
            "location": "/contributor-zone/technical-overview/#web",
            "text": "The frontend is a  Progressive Web Application (PWA) . The  Polymer  library offers the ability to quickly create a PWA implementing the  PRPL pattern , and to build  web components .  Repository:  Web",
            "title": "Web"
        },
        {
            "location": "/contributor-zone/technical-overview/#infrastructure",
            "text": "The projects are fully containerized using  Docker  and will be deployed on a  Kubernetes  cluster, most likely on the  GCP .",
            "title": "Infrastructure"
        },
        {
            "location": "/guides/setup-full-environment/",
            "text": "How to setup a full environment?\n\u00b6\n\n\nAccounts\n\u00b6\n\n\nFirst, you will need:\n\n\n\n\nA \nYelp\n account\n\n\nA \nGoogle\n account\n\n\n\n\nDeveloper keys\n\u00b6\n\n\nCreate a developer Key for:\n\n\n\n\nYelp Fusion API\n\n\nGoogle Places API\n\n\nGoogle Geocoding API\n\n\n\n\nEnvironment variables\n\u00b6\n\n\nOnce your accounts are setup, store your developer keys in a global environment file. This file should be located in \n~/.config/ryr\n, which is your configuration directory for the request-yo-racks project.\n\n\nRYR_GLOBAL_CONFIG_DIR\n=\n\"\n${\nHOME\n}\n/.config/ryr\"\n\nmkdir -p \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n\"\n\ncat \n<< EOF > \"${RYR_GLOBAL_CONFIG_DIR}/ryr-env.sh\"\n\n\nexport RYR_COLLECTOR_YELP_CLIENT_ID=<redacted>\n\n\nexport RYR_COLLECTOR_YELP_CLIENT_SECRET=<redacted>\n\n\nexport RYR_COLLECTOR_GOOGLE_PLACES_API_KEY=<redacted>\n\n\nexport RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY=<redacted>\n\n\nEOF\n\nchmod \n400\n \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/ryr-env.sh\"\n\n\n\n\n\n\nFor creating Kubernetes secrets, you need to create one file per key in the\n\n~/.config/ryr/kubernetes-secrets\n folder:\n\n\nmkdir -p \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/kubernetes-secrets\"\n\n\ncd\n \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/kubernetes-secrets\"\n\n\necho\n \n\"<redacted>\"\n > RYR_COLLECTOR_YELP_CLIENT_ID\n\necho\n \n\"<redacted>\"\n > RYR_COLLECTOR_YELP_CLIENT_SECRET\n\necho\n \n\"<redacted>\"\n > RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\necho\n \n\"<redacted>\"\n > RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY\n\n\n\n\n\nAt the end of the process, your \n~/.config/ryr\n folder should look like this:\n\n\n[\n~/.config/ryr\n]\n $ tree -L \n2\n\n.\n\u251c\u2500\u2500 kubernetes-secrets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_ID\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_SECRET\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RYR_WEB_GOOGLE_MAPS_API_KEY\n\u2514\u2500\u2500 ryr-env.sh\n\n\n\n\n\nClone the projects\n\u00b6\n\n\n\n\nWarning\n\n\nMinikube is using shared folders between the host and virtualbox and expects to find the source code of the projects in a sub-directory of the home folder of your user.\n\n\n\n\nCreate a folder which will contain the RYR projects (the \ncharts\n and \ndocs\n projects are optional as\nthey are no required to run the projects.):\n\n\nRYR_PROJECT_DIR\n=\n\"\n${\nHOME\n}\n/projects/request-yo-racks\"\n\nmkdir -p \n\"\n${\nRYR_PROJECT_DIR\n}\n\"\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n\"\n\n\nfor\n project in api infra web\n;\n \ndo\n\n  git clone git@github.com:request-yo-racks/\n${\nproject\n}\n.git\n\ndone\n\n\n\n\n\n\nEach project is provided with a \nMakefile\n and can be simply setup with the \nmake\n command.\n\n\nStart the services\n\u00b6\n\n\nExternal services\n\u00b6\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/infra/kubernetes\"\n\nmake provision\n\neval\n \n$(\nminikube docker-env\n)\n\nmake configure\n\n\n\n\n\nAPI\n\u00b6\n\n\neval\n \n$(\nminikube docker-env\n)\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/api\"\n\nmake setup deploy-minikube\n\n\n\n\n\nTest your setup from a terminal:\n\n\ncurl -i http://api.192.168.99.100.nip.io/places/\n\n\n\n\n\nOr browse it:\n\n\nopen http://api.192.168.99.100.nip.io/places/\n\n\n\n\n\nWeb\n\u00b6\n\n\nFor the GoogleMaps element to work, you will need to add a GoogleMaps API Key. Refer to\n\nMaps JavaScript API \n\nif you need more information.\n\n\nFirst create a \nconfig.js\n file to store the API key:\n\n\ncat \n<< EOF > \"${RYR_PROJECT_DIR}/web/src/config.js\"\n\n\nvar config = {\"GOOGLE_WEB_MAPS_API_KEY\": \"<redacted>\"};\n\n\nEOF\n\n\n\n\n\n\nThen deploy it:\n\n\neval\n \n$(\nminikube docker-env\n)\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/web\"\n\nmake setup deploy-minikube\n\n\n\n\n\nCheck the web application:\n\n\nopen http://www.192.168.99.100.nip.io/",
            "title": "Setup full environment"
        },
        {
            "location": "/guides/setup-full-environment/#how-to-setup-a-full-environment",
            "text": "",
            "title": "How to setup a full environment?"
        },
        {
            "location": "/guides/setup-full-environment/#accounts",
            "text": "First, you will need:   A  Yelp  account  A  Google  account",
            "title": "Accounts"
        },
        {
            "location": "/guides/setup-full-environment/#developer-keys",
            "text": "Create a developer Key for:   Yelp Fusion API  Google Places API  Google Geocoding API",
            "title": "Developer keys"
        },
        {
            "location": "/guides/setup-full-environment/#environment-variables",
            "text": "Once your accounts are setup, store your developer keys in a global environment file. This file should be located in  ~/.config/ryr , which is your configuration directory for the request-yo-racks project.  RYR_GLOBAL_CONFIG_DIR = \" ${ HOME } /.config/ryr\" \nmkdir -p  \" ${ RYR_GLOBAL_CONFIG_DIR } \" \ncat  << EOF > \"${RYR_GLOBAL_CONFIG_DIR}/ryr-env.sh\"  export RYR_COLLECTOR_YELP_CLIENT_ID=<redacted>  export RYR_COLLECTOR_YELP_CLIENT_SECRET=<redacted>  export RYR_COLLECTOR_GOOGLE_PLACES_API_KEY=<redacted>  export RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY=<redacted>  EOF \nchmod  400   \" ${ RYR_GLOBAL_CONFIG_DIR } /ryr-env.sh\"   For creating Kubernetes secrets, you need to create one file per key in the ~/.config/ryr/kubernetes-secrets  folder:  mkdir -p  \" ${ RYR_GLOBAL_CONFIG_DIR } /kubernetes-secrets\"  cd   \" ${ RYR_GLOBAL_CONFIG_DIR } /kubernetes-secrets\"  echo   \"<redacted>\"  > RYR_COLLECTOR_YELP_CLIENT_ID echo   \"<redacted>\"  > RYR_COLLECTOR_YELP_CLIENT_SECRET echo   \"<redacted>\"  > RYR_COLLECTOR_GOOGLE_PLACES_API_KEY echo   \"<redacted>\"  > RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY  At the end of the process, your  ~/.config/ryr  folder should look like this:  [ ~/.config/ryr ]  $ tree -L  2 \n.\n\u251c\u2500\u2500 kubernetes-secrets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_ID\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_SECRET\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RYR_WEB_GOOGLE_MAPS_API_KEY\n\u2514\u2500\u2500 ryr-env.sh",
            "title": "Environment variables"
        },
        {
            "location": "/guides/setup-full-environment/#clone-the-projects",
            "text": "Warning  Minikube is using shared folders between the host and virtualbox and expects to find the source code of the projects in a sub-directory of the home folder of your user.   Create a folder which will contain the RYR projects (the  charts  and  docs  projects are optional as\nthey are no required to run the projects.):  RYR_PROJECT_DIR = \" ${ HOME } /projects/request-yo-racks\" \nmkdir -p  \" ${ RYR_PROJECT_DIR } \"  cd   \" ${ RYR_PROJECT_DIR } \"  for  project in api infra web ;   do \n  git clone git@github.com:request-yo-racks/ ${ project } .git done   Each project is provided with a  Makefile  and can be simply setup with the  make  command.",
            "title": "Clone the projects"
        },
        {
            "location": "/guides/setup-full-environment/#start-the-services",
            "text": "",
            "title": "Start the services"
        },
        {
            "location": "/guides/setup-full-environment/#external-services",
            "text": "cd   \" ${ RYR_PROJECT_DIR } /infra/kubernetes\" \nmake provision eval   $( minikube docker-env ) \nmake configure",
            "title": "External services"
        },
        {
            "location": "/guides/setup-full-environment/#api",
            "text": "eval   $( minikube docker-env )  cd   \" ${ RYR_PROJECT_DIR } /api\" \nmake setup deploy-minikube  Test your setup from a terminal:  curl -i http://api.192.168.99.100.nip.io/places/  Or browse it:  open http://api.192.168.99.100.nip.io/places/",
            "title": "API"
        },
        {
            "location": "/guides/setup-full-environment/#web",
            "text": "For the GoogleMaps element to work, you will need to add a GoogleMaps API Key. Refer to Maps JavaScript API  \nif you need more information.  First create a  config.js  file to store the API key:  cat  << EOF > \"${RYR_PROJECT_DIR}/web/src/config.js\"  var config = {\"GOOGLE_WEB_MAPS_API_KEY\": \"<redacted>\"};  EOF   Then deploy it:  eval   $( minikube docker-env )  cd   \" ${ RYR_PROJECT_DIR } /web\" \nmake setup deploy-minikube  Check the web application:  open http://www.192.168.99.100.nip.io/",
            "title": "Web"
        },
        {
            "location": "/about/license/",
            "text": "License\n\u00b6\n\n\n\"Request Yo Racks\" is a collection of open source projects licensed under \nThe MIT License\n.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "\"Request Yo Racks\" is a collection of open source projects licensed under  The MIT License .",
            "title": "License"
        }
    ]
}